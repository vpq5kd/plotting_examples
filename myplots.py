# -*- coding: utf-8 -*-
"""myplots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZLua7zRuuAEm64nY3JCSLj2fTaZyB9tB
"""

import numpy as np
import matplotlib.pyplot as plt

numbers = np.random.normal(100, 6.04, 10000)
bins = np.histogram(numbers, bins=100, range=(50,150))
yb=bins[0]
xb=bins[1]
err=np.sqrt(yb)
bc=(xb[1:]-xb[:-1])/2+xb[:-1]
plt.title('random gauss')
plt.xlabel('x', loc = 'right')
plt.ylabel('Frequency', loc = 'top')
plt.errorbar(bc, yb, yerr=err, fmt="P", color="b")

#used a chatGPT query to generate the box in the top right corner

entries = len(numbers)
mean = 100
stddev = 6.04

stats_text = (
    "hist1\n"
    f"Entries   {entries}\n"
    f"Mean      {mean:.2f}\n"
    f"Std Dev   {stddev:.2f}"
)



plt.text(
    0.97, 0.97, stats_text,
    transform=plt.gca().transAxes,
    fontsize=10,
    va='top', ha='right',
    bbox=dict(boxstyle='round', facecolor='white', edgecolor='black')
)

plt.savefig('canvas1_py.png')
plt.close()

fig, ax = plt.subplots(2, 2, figsize=(10, 8))
ax[0][0].errorbar(bc, yb, yerr=err, fmt="P", color="b")
ax[0][0].set_xlabel('x', loc='right')
ax[0][0].set_ylabel('Frequency', loc='top')
ax[0][0].set_title('random gauss')
ax[0][0].text(
    0.97, 0.97, stats_text,
    transform=ax[0][0].transAxes,
    fontsize=10,
    va='top', ha='right',
    bbox=dict(boxstyle='round', facecolor='white', edgecolor='black')

)

uniform_numbers = np.random.uniform(50, 150, 10000)
combined_numbers = np.concatenate((numbers, uniform_numbers))

bins = np.histogram(combined_numbers, bins=100, range=(50, 150))
yb = bins[0]
xb = bins[1]
err=np.sqrt(yb)
bc=(xb[1:]-xb[:-1])/2+xb[:-1]

ax[0][1].errorbar(bc, yb, yerr=err, fmt="P", color="b")
ax[0][1].set_xlabel('x', loc='right')
ax[0][1].set_ylabel('Frequency', loc='top')
ax[0][1].set_title('Gauss+offset')
def generate_stats_text(entries, mean, stddev, number):
  return (
      f"hist{number}\n"
      f"Entries   {entries}\n"
      f"Mean      {mean:.2f}\n"
      f"Std Dev   {stddev:.2f}"
  )
ax[0][1].text(
    0.97, 0.97, generate_stats_text(len(combined_numbers), np.mean(combined_numbers), np.std(combined_numbers), 2),
    transform=ax[0][1].transAxes,
    fontsize=10,
    va='top', ha='right',
    bbox=dict(boxstyle='round', facecolor='white', edgecolor='black')
  )

#used a chatGPT query to generate code to replicate the base transformation
u = np.random.rand(10000 * 30)
powerlaw_data = 1 / (1 - u * (1 - 1/11))
powerlaw_data = powerlaw_data * 10 + 40


combined_data = np.concatenate([numbers, powerlaw_data])

bins = np.histogram(combined_data, bins=100, range=(50, 150))
yb = bins[0]
xb = bins[1]
err=np.sqrt(yb)
bc=(xb[1:]-xb[:-1])/2+xb[:-1]

ax[1][0].set_yscale('log')
ax[1][0].errorbar(bc, yb, yerr=err, fmt="P", color="b")
ax[1][0].set_xlabel('x', loc='right')
ax[1][0].set_ylabel('Frequency', loc='top')
ax[1][0].set_title('Gauss+offset2')
ax[1][0].set_ylim(1e2,1e5)
ax[1][0].text(
    0.97, 0.97, generate_stats_text(len(combined_data), np.mean(combined_data), np.std(combined_data), 3),
    transform=ax[1][0].transAxes,
    fontsize=10,
    va='top', ha='right',
    bbox=dict(boxstyle='round', facecolor='white', edgecolor='black')
  )

numbers_1 = np.random.normal(100, 12.13, 7500)
numbers_2 = np.random.normal(100, 12.13, 7500)
double_numbers = np.concatenate((numbers_1, numbers_2))

bins = np.histogram(double_numbers, bins=100, range=(50, 150))
yb = bins[0]
xb = bins[1]
err=np.sqrt(yb)
bc=(xb[1:]-xb[:-1])/2+xb[:-1]

ax[1][1].errorbar(bc, yb, yerr=err, fmt="P", color="b")
ax[1][1].set_xlabel('x', loc='right')
ax[1][1].set_ylabel('Frequency', loc='top')
ax[1][1].set_title('Double Gaussian')
ax[1][1].text(
    0.97, 0.97, generate_stats_text(len(double_numbers), np.mean(double_numbers), np.std(double_numbers), 4),
    transform=ax[1][1].transAxes,
    fontsize=10,
    va='top', ha='right',
    bbox=dict(boxstyle='round', facecolor='white', edgecolor='black')
  )
plt.savefig('canvas2_py.pdf')
plt.show()
plt.close()

